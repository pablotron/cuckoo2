libcuckoo 0.1.0 README
======================

Table of Contents
=================

  1. Overview
  2. System Requirements
  3. Usage
  4. Advanced Usage
  5. Included Hash Functions
  6. Links
  7. About the Author


1. Overview
===========
libcuckoo is a fast, simple, and memory-efficient Cuckoo hash table
implementation.  libcuckoo is extremely fast; here's how the insert and
lookup times stack up on my machine against the hash table
implementations in glibc and glib 2.0:

    Results (7572007 words):
    insert (cuckoo):      1.765sec (0.23314usec/word)
    lookup (cuckoo):      1.645sec (0.21722usec/word)
    insert (glib):        2.037sec (0.26896usec/word)
    lookup (glib):        1.922sec (0.25389usec/word)
    insert (glibc):       2.037sec (0.25268usec/word)
    lookup (glibc):       1.922sec (0.23852usec/word)

For lookup-heavy problems, you can pre-hash keys for even better
performance:

    insert (cuckoo/pre):  1.220sec (0.16109usec/word)
    lookup (cuckoo/pre):  1.082sec (0.14295usec/word)

(Obviously these numbers are specific to my machine.  You can run these
tests on your machine by typing "make all" in the tests/benchmark
directory).

The insert and lookup speed are a byproduct of the hashing method.
libcuckoo uses cuckoo hashing, while most common hash tables use linear
probing, chained hashing, or double hashing.  A detailed explanataion of
Cuckoo hashing is available at the following URL:

    http://en.wikipedia.org/wiki/Cuckoo_hashing

The hash function used by libcuckoo is configurable.  libcuckoo uses
hashlittle2, a variant of Bob Jenkin's lookup3 hash.  hashlittle2 was
chosen because it's speed, excellent overall hashing properties, and the
fact that it provides a second 32-bit hash for "free".  If you'd like to
use a different hash function, see the "Advanced Usage" section below
for instructions.

libcuckoo also comes with a handful of additional public domain hash
functions.  All of these functions are described in the "Included Hash
Functions" section below and  may be used independently of libcuckoo.


2. System Requirements
======================
A ANSI C99 compiler.  There are relatively few C99-isms in the code; I
imagine libcuckoo could be updated to remove this requirement if
necessary.

In order to build the tests you'll need:

* Ruby 1.8 (used to generate the test list)
* GNU Make (I'm using some GNUisms in the Makefile)

Finally, to build the library benchmark, you'll need:

* GLib 2.0
* Package Tool (used to find the dependencies for GLib)

I should also note that libcuckoo is very 32-bit specific; I wouldn't
count on it working out of the box on a 64-bit machine (unless you feel
like sending me a 64-bit machine to test with, that is :D).

You'll also need to change the hash algorithm for big-endian machines;
see the "Advanced Usage" section for details.


3. Usage
========
To create a new hash table:

    ck_hash hash;
    ck_err err;

    /* create a new hash table */
    err = ck_init(&hash, NULL);

And here's how to insert a value into the table:

    char  *key = "sample key",
          *val = "sample val";
    size_t len = strlen(key) + 1;

    err = ck_set(&hash, key, len, NULL, val);  

And here's how to get a value:

    char  *key = "sample key",
          *val, err_buf[1024];
    size_t len = strlen(key) + 1;

    /* get value from table */
    err = ck_get(&hash, key, len, NULL, &val);

    /* check result */
    if (err == CK_OK) {
      /* found value */
      printf("got %s\n", val);
    } else if (err == CK_NONE) {
      /* couldn't find key */
      printf("couldn't find %s\n", key);
    } else {
      /* print out error */
      ck_strerror(err, err_buf, sizeof(err_buf));
      printf("error: %s\n", err_buf);
    }

Here's how to remove an entry:

    char  *key = "sample key",
    size_t len = strlen(key) + 1;

    /* remove entry from table */
    err = ck_rm(&hash, key, len, NULL, NULL);

Finally, here's an example of inserting several key/value pairs at the
same time, complete with error checking.  This example also demonstrates
how to use iterators:

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    #include <cuckoo/cuckoo.h>

    /* c99-style assertion convenience macro */
    #define assert_ok(err, msg) do {                                    \
      char err_buf[1024];                                               \
      if ((err) != CK_OK) {                                             \
        ck_strerror((err), err_buf, sizeof(err_buf));                   \
        fprintf(stderr, "ERROR: couldn't %s: %s\n", (msg), err_buf);    \
        exit(EXIT_FAILURE);                                             \
      }                                                                 \
    } while (0)

    int main(int argc, char *argv[]) {
      ck_hash hash;
      ck_iter iter;
      ck_entry entry;
      ck_err err;

      char *key, *val, buf[1024];
      size_t i, len;

      /* some values for the hash table */
      struct { char *key, *val; } args[] = {
        { "dude",     "where's" },
        { "my",       "car?" },
        { "where's",  "your" },
        { "car",      "dude?" },
        { NULL,       NULL } 
      };

      /* create a new hash table */
      err = ck_init(&hash, NULL);
      assert_ok(err, "create hash table");
      
      /* insert values into the hash table */
      for (i = 0; args[i].key; i++) {
        /* get key, key length, and value */
        key = args[i].key;
        len = strlen(args[i].key) + 1;
        val = args[i].val;

        /* insert into table */
        err = ck_set(&hash, key, len, NULL, val);
        assert_ok(err, "insert key");
      }

      /*
       * now that we've got all the values inserted into the table,
       * let's use an iterator to print them back out.
       */

      /* create new iterator */
      err = ck_iter_init(&iter, &hash);
      assert_ok(err, "create iterator");

      /* iterate over table entries */
      while ((err = ck_iter_next(&iter, &entry)) != CK_OK) {
        /* grab key and value from entry */
        key = (char*) entry->key;
        val = (char*) entry->val;

        /* print out key and value */
        printf("key = %s, val = %s\n", key, val);
      }

      /* check for error */
      if (err != CK_NONE) {
        ck_strerror(err, buf, sizeof(buf));
        fprintf(stderr, "couldn't iterate over table: %s\n", buf);
        return EXIT_FAILURE;
      }

      /* clean up hash table */
      ck_fini(&hash);

      /* return success */
      return EXIT_SUCCESS;
    }

Note that even though I'm using NULL-terminated strings as the keys and
values above, libcuckoo does not require this.

Anyway, that's all you need to get started.  The next section covers
slightly more advanced topics like memory allocation and hashing
algorithms.


4. Advanced Usage
=================
This section explains how to customize the memory allocation, hashing
algorithms, and resize behavior of libcuckoo.  Let's start with the
memory allocation:

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    #include <cuckoo/cuckoo.h>

    /* c99-style convenience macro */
    #define assert_ok(err, msg) do {                                    \
      char err_buf[1024];                                               \
      if ((err) != CK_OK) {                                             \
        ck_strerror((err), err_buf, sizeof(err_buf));                   \
        fprintf(stderr, "ERROR: couldn't %s: %s\n", (msg), err_buf);    \
        exit(EXIT_FAILURE);                                             \
      }                                                                 \
    } while (0)

    /* keep track of memory use */
    static size_t bytes_allocated = 0;

    static void *
    my_fancy_malloc(ck_hash *hash, size_t num_bytes) {
      void *ret;

      /* allocate memory */
      if ((ret = malloc(num_bytes + sizeof(size_t))) == NULL) {
        perror("couldn't allocate memory: ");
        exit(EXIT_FAILURE);
      }

      /* save chunk size */
      memcpy(ptr, &num_bytes, sizeof(size_t);

      /* increment counter */
      bytes_allocated += num_bytes;

      /* return result */
      return ret;
    }

    static void
    my_fancy_free(ck_hash *hash, void *ptr) {
      size_t num_bytes;
      ptr -= sizeof(size_t);

      /* get chunk size */
      memcpy(&num_bytes, ptr, sizeof(size_t));

      /* decriment counter */
      bytes_allocated -= num_bytes;

      /* free memory */
      free(ptr);
    }

    int main(int argc, char *argv[]) {
      ck_hash hash;
      ck_cfg cfg;
      ck_err err;
      char buf[1024];

      /* set table config to reasonable defaults */
      err = ck_cfg_init(&cfg);
      assert_ok(err, "init table config"); 

      /* override malloc and free */
      cfg.malloc = my_fancy_malloc;
      cfg.free = my_fancy_free;
    
      /* create a hash table using my custom config */
      err = ck_init(&hash, &cfg);
      assert_ok(err, "create hash table"); 

      /*
       * ... do stuff here ...
       */

      /* free hash table */
      err = ck_fini(&hash);
      assert_ok(err, "free hash table");

      /* return success */
      return EXIT_SUCCESS;
    }

Note that you can use your config to create as many hash tables as you'd
like.

Next up is the hash function.  Technically libcuckoo uses two hash
functions: one for the first bucket, and one for the second.  This is
why hashlittle2 is the default hash function; because we get the second
hash for "free".  That said, here's how to switch the hash function to
something else:

    /* headers omitted for brevity... */

    static ck_err
    my_hash(ck_hash *hash, void *buf, size_t buf_len, uint32_t *ret) {
      /* use LV as the first hash, and DJB as the second */
      ret[0] = ck_hash_lv(buf, buf_len);
      ret[0] = ck_hash_djb(buf, buf_len);

      /* return success */
      return CK_OK;
    }

    int main(int argc, char *argv[]) {
      ck_hash hash;
      ck_cfg cfg;
      ck_err err;
      char buf[1024];

      /* initialize table config */
      err = ck_cfg_init(&cfg);
      assert_ok(err, "init table config"); 

      /* set custom hash function */
      cfg.hash = my_hash;

      /* create a hash table using custom config */
      err = ck_init(&hash, &cfg);
      assert_ok(err, "create hash table"); 

      /* do stuff here... */

      /* free hash table */
      err = ck_fini(&hash);
      assert_ok(err, "free hash table");

      /* return success */
      return EXIT_SUCCESS;
    }

5. Included Hash Functions
==========================
Several additional public domain hash functions are included with
libcuckoo.  The default hash function is hashlittle2, a variant on Bob
Jenkin's lookup3, but depending on your requirements something else may
be more appropriate.  In no particular order, the hash functions are:

  * Paul Hsieh's Super Fast Hash (ck_hash_superfast)
    http://www.azillionmonkeys.com/qed/hash.html

  * Bob Jenkin's Lookup 3 Hash (ck_hash_jenkins_lookup3)
    http://burtleburtle.net/bob/hash/doobs.html

  * Fowler / Noll / Vo (FNV) Hash (ck_hash_fnv)
    http://www.isthe.com/chongo/tech/comp/fnv/ 

  * AlphaNum Hash (ck_hash_alphanum) [1]
    (source: Paul Hsieh's test suite)

  * Robert Sedgwick's RS Hash (ck_hash_rs)
    http://www.vak.ru/doku.php/proj/hash/sources
    (source: "Algorithms in C", by Robert Sedgwick)

  * Justin Sobel's JS Hash (ck_hash_js)
    http://www.vak.ru/doku.php/proj/hash/sources

  * PJ Weinberger Hash (ck_hash_pjw)
    http://www.vak.ru/doku.php/proj/hash/sources
    (source: "Compilers (Principles, Techniques and Tools)")

  * ELF Hash (ck_hash_elf)
    http://www.vak.ru/doku.php/proj/hash/sources

  * BKDR Hash (ck_hash_bkdr)
    http://www.vak.ru/doku.php/proj/hash/sources
    (source: "The C Programming Language")

  * SDBM Hash (ck_hash_sdbm)
    http://www.vak.ru/doku.php/proj/hash/sources

  * DJB Hash (ck_hash_djb) [1]
    http://www.vak.ru/doku.php/proj/hash/sources
    (source: Daniel J. Bernstein on comp.lang.c)

  * DEK Hash (ck_hash_dek)
    http://www.vak.ru/doku.php/proj/hash/sources

  * LY Hash Function (ck_hash_ly)
    http://www.vak.ru/doku.php/proj/hash/sources
    (source: http://leo.yuriev.ru/random)

  * ROT13 Hash Function (ck_hash_rot13)
    http://www.vak.ru/doku.php/proj/hash/sources

[1] Note that ck_hash_alphanum and ck_hash_djb are identical, 
    except for the hash seed (0 vs. 5381).  It's not clear to me if
    these are actually separate algorithms or if someone accidentally
    typed it incorrectly, so I've included both for reference.

By the way, if you know of a function that's public domain and not
listed here, let me know; I'd love to include it with everything else
for reference.


6. Links
========
* Paul Hsieh's Super Fast Hash:
  http://www.azillionmonkeys.com/qed/hash.html
* Bob Jenkin's Lookup 3:
  http://burtleburtle.net/bob/hash/doobs.html
* Hash Library Benchmarks:
  http://www.ipd.bth.se/ska/sim_home/hash_performance.html
* A handful of common hash algorithms:
  http://www.vak.ru/doku.php/proj/hash/sources


7. About the Author
===================
Paul Duncan <pabs@pablotron.org>
http://pablotron.org/
